[gd_scene load_steps=12 format=2]

[ext_resource path="res://Textures/ui/objects/frame.png" type="Texture2D" id=1]
[ext_resource path="res://Textures/ui/images/glass.png" type="Texture2D" id=2]
[ext_resource path="res://Scripts/UI/HUD/Minimap.gd" type="Script" id=3]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

// Which color you want to change
uniform vec4 u_color_key : source_color;
// Which color to replace it with
uniform vec4 u_replacement_color : source_color;
uniform vec4 u_replacement_alpha : source_color;
uniform float u_tolerance;

void fragment() {
    // Get color from the sprite texture at the current pixel we are rendering
    vec4 original_color = texture(TEXTURE, UV);
    vec3 col = original_color.rgb;
    // Get a rough degree of difference between the texture color and the color key
    vec3 diff3 = col - u_color_key.rgb;
    float m = max(max(abs(diff3.r), abs(diff3.g)), abs(diff3.b));
    // Change color of pixels below tolerance threshold, while keeping shades if any (a bit naive, there may better ways)
    float brightness = length(col);
    col = mix(col, u_replacement_color.rgb * brightness, step(m, u_tolerance));
	float col2 = original_color.a;
    // Get a rough degree of difference between the texture color and the color key
    float diff4 = col2 - u_color_key.a;
    col2 = mix(col2, u_replacement_alpha.a * brightness, step(m, u_tolerance));
    // Assign final color for the pixel, and preserve transparency
    COLOR = vec4(col.rgb, col2);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/u_color_key = Color( 1, 1, 1, 1 )
shader_param/u_replacement_color = Color( 0, 0, 0, 0 )
shader_param/u_replacement_alpha = Color( 0, 0, 0, 0.196078 )
shader_param/u_tolerance = 0.0

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

// Which color you want to change
uniform vec4 u_color_key : source_color;
// Which color to replace it with
uniform vec4 u_replacement_color : source_color;
// How much tolerance for the replacement color (between 0 and 1)
uniform float u_tolerance;

void fragment() {
    // Get color from the sprite texture at the current pixel we are rendering
    vec4 original_color = texture(TEXTURE, UV);
    vec3 col = original_color.rgb;
    // Get a rough degree of difference between the texture color and the color key
    vec3 diff3 = col - u_color_key.rgb;
    float m = max(max(abs(diff3.r), abs(diff3.g)), abs(diff3.b));
    // Change color of pixels below tolerance threshold, while keeping shades if any (a bit naive, there may better ways)
    float brightness = length(col);
    col = mix(col, u_replacement_color.rgb * brightness, step(m, u_tolerance));
    // Assign final color for the pixel, and preserve transparency
    COLOR = vec4(col.rgb, original_color.a);
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/u_color_key = Color( 1, 1, 1, 1 )
shader_param/u_replacement_color = Color( 0.698039, 0.341176, 0.74902, 0 )
shader_param/u_tolerance = null

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

// Which color you want to change
uniform vec4 u_color_key : source_color;
// Which color to replace it with
uniform vec4 u_replacement_color : source_color;
// How much tolerance for the replacement color (between 0 and 1)
uniform float u_tolerance;

void fragment() {
    // Get color from the sprite texture at the current pixel we are rendering
    vec4 original_color = texture(TEXTURE, UV);
    vec3 col = original_color.rgb;
    // Get a rough degree of difference between the texture color and the color key
    vec3 diff3 = col - u_color_key.rgb;
    float m = max(max(abs(diff3.r), abs(diff3.g)), abs(diff3.b));
    // Change color of pixels below tolerance threshold, while keeping shades if any (a bit naive, there may better ways)
    float brightness = length(col);
    col = mix(col, u_replacement_color.rgb * brightness, step(m, u_tolerance));
    // Assign final color for the pixel, and preserve transparency
    COLOR = vec4(col.rgb, original_color.a);
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/u_color_key = Color( 1, 1, 1, 1 )
shader_param/u_replacement_color = Color( 0.129412, 0.870588, 0.854902, 0 )
shader_param/u_tolerance = null

[sub_resource type="Shader" id=7]
code = "shader_type canvas_item;

// Which color you want to change
uniform vec4 u_color_key : source_color;
// Which color to replace it with
uniform vec4 u_replacement_color : source_color;
// How much tolerance for the replacement color (between 0 and 1)
uniform float u_tolerance;

void fragment() {
    // Get color from the sprite texture at the current pixel we are rendering
    vec4 original_color = texture(TEXTURE, UV);
    vec3 col = original_color.rgb;
    // Get a rough degree of difference between the texture color and the color key
    vec3 diff3 = col - u_color_key.rgb;
    float m = max(max(abs(diff3.r), abs(diff3.g)), abs(diff3.b));
    // Change color of pixels below tolerance threshold, while keeping shades if any (a bit naive, there may better ways)
    float brightness = length(col);
    col = mix(col, u_replacement_color.rgb * brightness, step(m, u_tolerance));
    // Assign final color for the pixel, and preserve transparency
    COLOR = vec4(col.rgb, original_color.a);
}"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )
shader_param/u_color_key = Color( 1, 1, 1, 1 )
shader_param/u_replacement_color = Color( 1, 1, 1, 0 )
shader_param/u_tolerance = null

[node name="Minimap" type="MarginContainer"]
offset_right = 110.0
offset_bottom = 110.0
custom_minimum_size = Vector2( 100, 100 )
custom_constants/offset_right = 20
custom_constants/offset_top = 20
custom_constants/offset_left = 20
custom_constants/offset_bottom = 20
script = ExtResource( 3 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="MarginContainer" type="MarginContainer" parent="."]
offset_left = 20.0
offset_top = 20.0
offset_right = 100.0
offset_bottom = 100.0
custom_constants/offset_right = 10
custom_constants/offset_top = 10
custom_constants/offset_left = 10
custom_constants/offset_bottom = 10

[node name="TextureRect" type="TextureRect" parent="MarginContainer"]
material = SubResource( 2 )
offset_left = 10.0
offset_top = 10.0
offset_right = 70.0
offset_bottom = 70.0
texture = ExtResource( 2 )
expand = true
stretch_mode = 1

[node name="MinimapMargin" type="MarginContainer" parent="."]
offset_left = 20.0
offset_top = 20.0
offset_right = 100.0
offset_bottom = 100.0
custom_constants/offset_right = 15
custom_constants/offset_top = 15
custom_constants/offset_left = 15
custom_constants/offset_bottom = 15

[node name="SubViewportContainer" type="SubViewportContainer" parent="MinimapMargin"]
offset_left = 15.0
offset_top = 15.0
offset_right = 65.0
offset_bottom = 65.0
custom_minimum_size = Vector2( 50, 50 )
stretch = true

[node name="SubViewport" type="SubViewport" parent="MinimapMargin/SubViewportContainer"]
size = Vector2( 50, 50 )
transparent_bg = true
handle_input_locally = false
hdr = false
usage = 1
render_target_update_mode = 3

[node name="B1" type="NinePatchRect" parent="."]
material = SubResource( 4 )
offset_left = 20.0
offset_top = 20.0
offset_right = 100.0
offset_bottom = 100.0
mouse_filter = 1
texture = ExtResource( 1 )
patch_margin_left = 25
patch_margin_top = 25
patch_margin_right = 25
patch_margin_bottom = 25
axis_stretch_horizontal = 1
axis_stretch_vertical = 1

[node name="B2" type="MarginContainer" parent="."]
offset_left = 20.0
offset_top = 20.0
offset_right = 100.0
offset_bottom = 100.0
mouse_filter = 2
custom_constants/offset_right = 5
custom_constants/offset_top = 5
custom_constants/offset_left = 5
custom_constants/offset_bottom = 5

[node name="B2" type="NinePatchRect" parent="B2"]
material = SubResource( 6 )
offset_left = 5.0
offset_top = 5.0
offset_right = 75.0
offset_bottom = 75.0
texture = ExtResource( 1 )
patch_margin_left = 25
patch_margin_top = 25
patch_margin_right = 25
patch_margin_bottom = 25

[node name="B3" type="MarginContainer" parent="."]
offset_left = 20.0
offset_top = 20.0
offset_right = 100.0
offset_bottom = 100.0
mouse_filter = 2
custom_constants/offset_right = 10
custom_constants/offset_top = 10
custom_constants/offset_left = 10
custom_constants/offset_bottom = 10

[node name="B3" type="NinePatchRect" parent="B3"]
material = SubResource( 8 )
offset_left = 10.0
offset_top = 10.0
offset_right = 70.0
offset_bottom = 70.0
texture = ExtResource( 1 )
patch_margin_left = 25
patch_margin_top = 25
patch_margin_right = 25
patch_margin_bottom = 25
[connection signal="mouse_entered" from="B1" to="." method="_on_B1_mouse_entered"]
[connection signal="mouse_exited" from="B1" to="." method="_on_B1_mouse_exited"]
